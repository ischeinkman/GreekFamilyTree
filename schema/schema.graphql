#-------------------------- Date and Time schemas ----------------------------
enum MonthEnum {
    JANUARY, 
    FEBRUARY, 
    MARCH, 
    APRIL,
    MAY,
    JUNE,
    JULY,
    AUGUST,
    SEPTEMBER,
    OCTOBER,
    NOVEMBER,
    DECEMBER,
}

type OutputDate {
    year : Int!
    
    monthEnum : MonthEnum!
    monthName : String!
    monthNumber : Int!

    dayOfMonth : Int 
}

input MonthInput {
    name : String 
    number : Int
}
input InputDate {
    year : Int! 

    month : MonthInput!

    dayOfMonth : Int 
}



#----------------------------- Output schemas ----------------------------------

"""A current or former member in the greek life organization."""
type GreekMember {

    """A unique ID to identify the member and pass around for modification."""
    id : ID!

    """The full name of the member. """
    name : String!

    """The first name of the member."""
    firstName : String!

    """The last name of the member."""
    lastName : String! 

    """The middle name(s) of the member."""
    middleNames : [String]

    """The name of the class this member pledged, generally given as a "number" in base-greek-alphabet. """
    pledgeClass : String!

    """The date this member joined this chapter of the organization."""
    joined : OutputDate!

    """When the member has graduated/will graduate."""
    graduationDate : OutputDate!

    """Whether or not the member is currently active."""
    isActive : Boolean!

    """Whether or not the member is an alumn."""
    isAlumn : Boolean!

    """The member's current greek life family."""
    currentFamily : Family!

    """The member's greek life family as of a date in the past."""
    familyAsOf(date : InputDate) : Family

    """The list of pairings representing all of this member's littles."""
    littlePairings : [Pickup]!

    """The member's littles."""
    littles : [GreekMember]!

    """The list of members representing all of this member's bigs; generally only 1, but in the case of adoption can be more."""
    bigPairings : [Pickup]!

    """The member's big; can be NULL if this member is a transfer/founder."""
    big : GreekMember
}

"""Some chapters organized some or all of their families in "groupings". """
type FamilyGroup {

    """A unique ID to identify the family group and pass around for modification."""
    id : ID!

    """The name of this group of families."""
    name : String!

    """The families in this group."""
    families : [Family]!
}

"""A single line that is passed from Big to Little."""
type Family {
    id : ID!
    name : String!
    group : FamilyGroup
    creation : FamilyCreation!
    currentActives : [GreekMember]!
}


"""Represents the creation of a new family by a member of the organization."""
type FamilyCreation {
    id : ID!
    family : Family! 
    date : OutputDate # If NULL means unknown
    founders : [GreekMember]! #If empty means unknown
}

"""Represents two members entering into a Big-Little pair."""
type Pickup {
    id : ID!
    big : GreekMember!
    little : GreekMember!
    isAdoption : Boolean!
    date : OutputDate! 
    family : Family!
}

type Query {
    memberByName(name : String!) : GreekMember
    familyByName(name : String!) : Family
    familyGroupByName(name : String!) : FamilyGroup
    
    currentActives : [GreekMember!]!
}





#----------------------------- Mutation schemas -------------------------------
input AddPickupParams {
    big : ID!
    little : ID!
    isAdoption : Boolean #Defaults to FALSE
    date : InputDate!
    family : ID #Defaults to big.familyAsOf(date)
}

input AddFamilyParams {
    name : String!
    createdDate : InputDate  
    founders : [ID]
    members: [ID]
    group : ID
}

input AddFamilyGroupParams {
    name : String!
    families : [ID]
}

type Mutation {
    addPickup(params : AddPickupParams) : Pickup
    addFamily(params : AddFamilyParams) : Family
    addFamilyGroup(params : AddFamilyGroupParams) : FamilyGroup
}